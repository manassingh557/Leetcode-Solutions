/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 // Solution 1 Time-O(n) Space-O(n)
class Solution {
public:
    TreeNode* increasingBST(TreeNode* root) {
        if(!root)   //If Tree is empty 
            return NULL;
        vector<int> pre;    //Vector for storing all nodes in inorder
        solve(root,pre);    //Calling function to get inorder traversal
        root=new TreeNode(pre[0]);  //Now constructing Tree with inorder traversal of nodes
        TreeNode *temp=root;
        for(int i=1;i<pre.size();i++)
        {
            root->right=new TreeNode(pre[i]);
            root=root->right;
        }
        return temp;
    }
    void solve(TreeNode* root,vector<int> &pre) //Inorder Traversal of Tree
    {
        if(!root)
            return;
        solve(root->left,pre);
        pre.push_back(root->val);
        solve(root->right,pre);
    }
};

//Solution 2 Time-O(n) Space=O(height)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode*newroot=NULL,*curr=NULL;
public:
    TreeNode* increasingBST(TreeNode* root) {
        if(!root)   //If Tree is empty 
            return NULL;
        increasingBST(root->left);
        if(newroot==NULL)   //If newroot is null then update newroot ans curr
        {
            newroot=new TreeNode(root->val);
            curr=newroot;
        }   
        else            //Else add newnode to curr right
        {
            curr->right=new TreeNode(root->val);
            curr=curr->right;
        }
        increasingBST(root->right);
        return newroot;
    }
};
